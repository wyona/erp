<?xml version="1.0" encoding="UTF-8"?>

<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

 <map:components>
  <map:generators default="file">
    <map:generator label="content" logger="sitemap.generator.file" name="file" pool-max="32" src="org.apache.cocoon.generation.FileGenerator"/>
    <map:generator label="content" logger="sitemap.generator.directory" name="directory" pool-max="16" src="org.apache.cocoon.generation.DirectoryGenerator"/>
    <map:generator label="content" logger="sitemap.generator.xpathdirectory" name="xpathdirectory" src="org.apache.cocoon.generation.XPathDirectoryGenerator"/>
    <map:generator label="content" logger="sitemap.generator.request" name="request" pool-max="16" src="org.apache.cocoon.generation.RequestGenerator"/>
    <map:generator label="content" logger="sitemap.generator.stream" name="stream" pool-max="16" src="org.apache.cocoon.generation.StreamGenerator"/>
    <map:generator name="exception" src="org.apache.cocoon.generation.ExceptionGenerator"/>
  </map:generators>

  <map:transformers default="xslt">

    <!-- NOTE: This is the default XSLT processor. -->
    <map:transformer logger="sitemap.transformer.xslt" name="xslt" pool-max="32" src="org.apache.cocoon.transformation.TraxTransformer">
      <use-request-parameters>false</use-request-parameters>
      <use-session-parameters>false</use-session-parameters>
      <use-cookie-parameters>false</use-cookie-parameters>
      <xslt-processor-role>xalan</xslt-processor-role>
      <check-includes>true</check-includes>
    </map:transformer>

    <!-- NOTE: This is the same as the default processor but with a different name (for compatibility) -->
    <map:transformer logger="sitemap.transformer.xalan" name="xalan" pool-max="32" src="org.apache.cocoon.transformation.TraxTransformer">
      <use-request-parameters>false</use-request-parameters>
      <use-session-parameters>false</use-session-parameters>
      <use-cookie-parameters>false</use-cookie-parameters>
      <xslt-processor-role>xalan</xslt-processor-role>
      <check-includes>true</check-includes>
    </map:transformer>

    <!-- NOTE: You can also try XSLTC as the default processor. If you use Xalan extensions, use the "xalan" transformer. -->
    <map:transformer logger="sitemap.transformer.xsltc" name="xsltc" pool-max="32" src="org.apache.cocoon.transformation.TraxTransformer">
      <use-request-parameters>false</use-request-parameters>
      <use-session-parameters>false</use-session-parameters>
      <use-cookie-parameters>false</use-cookie-parameters>
      <xslt-processor-role>xsltc</xslt-processor-role>
      <check-includes>true</check-includes>
    </map:transformer>

    <map:transformer logger="sitemap.transformer.include" name="include" pool-max="16" src="org.apache.cocoon.transformation.IncludeTransformer"/>
    <map:transformer logger="sitemap.transformer.xinclude" name="xinclude" pool-max="16" src="org.apache.cocoon.transformation.XIncludeTransformer"/>
    <map:transformer logger="sitemap.transformer.cinclude" name="cinclude" pool-max="16" src="org.apache.cocoon.transformation.CIncludeTransformer"/>
    <map:transformer logger="sitemap.transformer.encodeURL" name="encodeURL" src="org.apache.cocoon.transformation.EncodeURLTransformer"/>
    <map:transformer logger="sitemap.transformer.write-source" name="write-source" src="org.apache.cocoon.transformation.SourceWritingTransformer"/>
    <map:transformer logger="sitemap.transformer.jpath" name="jpath" src="org.apache.cocoon.transformation.JPathTransformer"/>
    <map:transformer logger="sitemap.transformer.filter" name="filter" src="org.apache.cocoon.transformation.FilterTransformer"/>
    <map:transformer logger="sitemap.transformer.writeDOMsession" name="writeDOMsession" src="org.apache.cocoon.transformation.WriteDOMSessionTransformer"/>
    <map:transformer logger="sitemap.transformer.readDOMsession" name="readDOMsession" src="org.apache.cocoon.transformation.ReadDOMSessionTransformer"/>
    <map:transformer logger="sitemap.transformer.log" name="log" pool-max="16" src="org.apache.cocoon.transformation.LogTransformer"/>
    <map:transformer logger="sitemap.transformer.jx" name="jx" pool-max="16" src="org.apache.cocoon.transformation.JXTemplateTransformer"/>
    <map:transformer logger="sitemap.transformer.paginate" name="paginate" src="org.apache.cocoon.transformation.pagination.Paginator"/>
  
    <map:transformer logger="forms" name="forms" src="org.apache.cocoon.forms.transformation.FormsTemplateTransformer"/>


    <map:transformer name="session" pool-max="32" src="org.apache.cocoon.webapps.session.transformation.SessionTransformer"/>
    <map:transformer name="session-pre" pool-max="32" src="org.apache.cocoon.webapps.session.transformation.SessionPreTransformer"/>
    <map:transformer name="session-post" pool-max="32" src="org.apache.cocoon.webapps.session.transformation.SessionPostTransformer"/>


    <map:transformer logger="sitemap.transformer.extractor" name="extractor" src="org.apache.cocoon.transformation.FragmentExtractorTransformer"/>

    <map:transformer logger="sitemap.transformer.lexer" name="lexer" src="org.apache.cocoon.transformation.LexicalTransformer"/>
    <map:transformer logger="sitemap.transformer.parser" name="parser" src="org.apache.cocoon.transformation.ParserTransformer"/>
    <map:transformer logger="sitemap.transformer.pattern" name="pattern" src="org.apache.cocoon.transformation.PatternTransformer"/>


   <map:transformer logger="sitemap.transformer.sql" name="sql" src="org.apache.cocoon.transformation.SQLTransformer"/>



    <map:transformer logger="sitemap.transformer.deli" name="deli" pool-max="32" src="org.apache.cocoon.transformation.DeliTransformer">
      <use-request-parameters>false</use-request-parameters>
      <use-session-parameters>false</use-session-parameters>
      <use-cookie-parameters>false</use-cookie-parameters>
      <xslt-processor-role>xalan</xslt-processor-role>
    </map:transformer>



    <map:transformer logger="sitemap.transformer.html" name="html" src="org.apache.cocoon.transformation.HTMLTransformer"/>

    <map:transformer name="ldap" src="org.apache.cocoon.transformation.LDAPTransformer"/>


  <map:transformer logger="sitemap.transformer.validate" name="validate" src="org.apache.cocoon.transformation.ValidatingTransformer">
    
    <!--+ The "grammar" an optional configuration element specifying the default
          | grammar used by the validator. When the "grammar" element is specified,
          | the automatic detection of schema types will be disabled.
          |
          | This can also be specifed in pipelines as a parameter:
          |   <map:parameter name="grammar" value="... grammar identifier ..."/>
          |
          | For a list of well known grammars, see the JavaDoc documentation for the
          | org.apache.cocoon.components.validation.Validator interface.
          +-->
    <!-- <grammar>... grammar identifier ...</grammar> -->
  </map:transformer>

  <map:transformer logger="sitemap.transformer.validate" name="validation-report" src="org.apache.cocoon.transformation.ValidationReportTransformer">
    
    <!--+ The "grammar" an optional configuration element specifying the default
          | grammar used by the validator. When the "grammar" element is specified,
          | the automatic detection of schema types will be disabled.
          |
          | This can also be specifed in pipelines as a parameter:
          |   <map:parameter name="grammar" value="... grammar identifier ..."/>
          |
          | For a list of well known grammars, see the JavaDoc documentation for the
          | org.apache.cocoon.components.validation.Validator interface.
          +-->
    <!-- <grammar>... grammar identifier ...</grammar> -->
  </map:transformer>
  


  <map:transformer logger="sitemap.transformer.xsltal" name="xsltal" pool-max="8" src="org.apache.cocoon.transformation.TraxTransformer">
    <default-src>resource://org/apache/cocoon/blocks/xsltal/resources/tal2xslt.xsl</default-src>

    <use-request-parameters>false</use-request-parameters>
    <use-session-parameters>false</use-session-parameters>
    <use-cookie-parameters>false</use-cookie-parameters>
    <!-- Xalan -->
    <!--transformer-factory>org.apache.xalan.processor.TransformerFactoryImpl</transformer-factory-->
    <!-- XSLTC -->
    <!--transformer-factory>org.apache.xalan.xsltc.trax.TransformerFactoryImpl</transformer-factory-->
    <!-- Old (6.5.2) Saxon: -->
    <!--transformer-factory>com.icl.saxon.TransformerFactoryImpl</transformer-factory-->
    <!--  New (7.x?) Saxon: -->
    <transformer-factory>net.sf.saxon.TransformerFactoryImpl</transformer-factory>
  </map:transformer>
</map:transformers>


  <!--+
      | Serializers consume SAX events and produce a character stream. Every
      | pipeline needs to be terminated by a serializer.
      +-->
  <map:serializers default="html">
    <map:serializer logger="sitemap.serializer.links" name="links" src="org.apache.cocoon.serialization.LinkSerializer"/>
    <map:serializer logger="sitemap.serializer.xml" mime-type="text/xml" name="xml" src="org.apache.cocoon.serialization.XMLSerializer"/>

    <map:serializer logger="sitemap.serializer.html" mime-type="text/html" name="html" pool-max="32" src="org.apache.cocoon.serialization.HTMLSerializer">
      <doctype-public>-//W3C//DTD HTML 4.01 Transitional//EN</doctype-public>
      <doctype-system>http://www.w3.org/TR/html4/loose.dtd</doctype-system>
    </map:serializer>

    <map:serializer logger="sitemap.serializer.wml" mime-type="text/vnd.wap.wml" name="wml" src="org.apache.cocoon.serialization.XMLSerializer">
     <doctype-public>-//WAPFORUM//DTD WML 1.1//EN</doctype-public>
     <doctype-system>http://www.wapforum.org/DTD/wml_1.1.xml</doctype-system>
     <encoding>ASCII</encoding>
     <omit-xml-declaration>yes</omit-xml-declaration>
    </map:serializer>

    <map:serializer logger="sitemap.serializer.chtml" mime-type="text/html" name="chtml" src="org.apache.cocoon.serialization.HTMLSerializer">
     <!--+
         | Compact HTML for Small Information Appliances,
         | based on http://www.w3.org/TR/1998/NOTE-compactHTML-19980209/
         + -->
     <doctype-public>-//W3C//DTD Compact HTML 1.0 Draft//EN</doctype-public>
    </map:serializer>

    <map:serializer logger="sitemap.serializer.svgxml" mime-type="image/svg+xml" name="svgxml" src="org.apache.cocoon.serialization.XMLSerializer">
     <doctype-public>-//W3C//DTD SVG 1.0//EN</doctype-public>
     <doctype-system>http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd</doctype-system>
    </map:serializer>

    <map:serializer logger="sitemap.serializer.xhtml" mime-type="text/html" name="xhtml" ppool-max="64" src="org.apache.cocoon.serialization.XMLSerializer">
      <!--+
          | You can choose from Strict, Transitional, or Frameset XHTML.
          | For Strict XHTML set doctype to:
          |   <doctype-public>-//W3C//DTD XHTML 1.0 Strict//EN</doctype-public>
          |   <doctype-system>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</doctype-system>
          | For Transitional XHTML set doctype to:
          |   <doctype-public>-//W3C//DTD XHTML 1.0 Transitional//EN</doctype-public>
          |   <doctype-system>http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd</doctype-system>
          | For Frameset XHTML set doctype to:
          |   <doctype-public>-//W3C//DTD XHTML 1.0 Frameset//EN</doctype-public>
          |   <doctype-system>http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd</doctype-system>
          |
          | Default XHTML doctype in Cocoon is XHTML Strict. If you want to use more than one
          | XHTML DTD simultaneously, you can define several XHTML serializers.
          +-->
      <doctype-public>-//W3C//DTD XHTML 1.0 Strict//EN</doctype-public>
      <doctype-system>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</doctype-system>
      <encoding>UTF-8</encoding>
    </map:serializer>

    <map:serializer logger="sitemap.serializer.xhtml" mime-type="application/xhtml+xml" name="xhtml11" pool-max="64" src="org.apache.cocoon.serialization.XMLSerializer">
      <doctype-public>-//W3C//DTD XHTML 1.1//EN</doctype-public>
      <doctype-system>http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</doctype-system>
      <encoding>UTF-8</encoding>
    </map:serializer>

    <map:serializer logger="sitemap.serializer.text" mime-type="text/plain" name="text" src="org.apache.cocoon.serialization.TextSerializer"/>
    <map:serializer logger="sitemap.serializer.vrml" mime-type="model/vrml" name="vrml" src="org.apache.cocoon.serialization.TextSerializer"/>
    <map:serializer logger="sitemap.serializer.zip" mime-type="application/zip" name="zip" src="org.apache.cocoon.serialization.ZipArchiveSerializer"/>
    <map:serializer logger="sitemap.serializer.sxw" mime-type="application/vnd.sun.xml.writer" name="sxw" src="org.apache.cocoon.serialization.ZipArchiveSerializer"/>
    <map:serializer logger="sitemap.serializer.sxc" mime-type="application/vnd.sun.xml.calc" name="sxc" src="org.apache.cocoon.serialization.ZipArchiveSerializer"/>
    <map:serializer logger="sitemap.serializer.sxd" mime-type="application/vnd.sun.xml.draw" name="sxd" src="org.apache.cocoon.serialization.ZipArchiveSerializer"/>
    <map:serializer logger="sitemap.serializer.sxi" mime-type="application/vnd.sun.xml.impress" name="sxi" src="org.apache.cocoon.serialization.ZipArchiveSerializer"/>
  
    <map:serializer logger="sitemap.serializer.svg2jpeg" mime-type="image/jpeg" name="svg2jpeg" src="org.apache.cocoon.serialization.SVGSerializer">
      <parameter name="quality" type="float" value="0.9"/>
    </map:serializer>
    <map:serializer logger="sitemap.serializer.svg2png" mime-type="image/png" name="svg2png" src="org.apache.cocoon.serialization.SVGSerializer"/>


    <map:serializer logger="sitemap.serializer.fo2pdf" mime-type="application/pdf" name="fo2pdf" src="org.apache.cocoon.serialization.FOPSerializer">
      <!-- This element specifies URL to FOP user configuration file.
           It can be absolute file URL or relative to the servlet context.
           Examples:

      <user-config>file:/C:/cocoon/fop-config.xml</user-config>
      <user-config>WEB-INF/fop-config.xml</user-config>
      -->

      <!-- Should serializer set content length header or not?
           Default is true.
      <set-content-length>true</set-content-length>
      -->
    </map:serializer>

    <map:serializer logger="sitemap.serializer.fo2ps" mime-type="application/postscript" name="fo2ps" src="org.apache.cocoon.serialization.FOPSerializer"/>

    <map:serializer logger="sitemap.serializer.fo2pcl" mime-type="vnd.hp-PCL" name="fo2pcl" src="org.apache.cocoon.serialization.FOPSerializer"/>

    <map:serializer logger="sitemap.serializer.exml" mime-type="text/xml" name="exml" src="org.apache.cocoon.components.serializers.XMLSerializer">
      <encoding>UTF-8</encoding>
    </map:serializer>
    <map:serializer logger="sitemap.serializer.exhtml" mime-type="text/xhtml" name="exhtml" src="org.apache.cocoon.components.serializers.XHTMLSerializer">
      <encoding>UTF-8</encoding>
    </map:serializer>
    <map:serializer logger="sitemap.serializer.ehtml" mime-type="text/html" name="ehtml" src="org.apache.cocoon.components.serializers.HTMLSerializer">
      <encoding>UTF-8</encoding>
    </map:serializer>
</map:serializers>


  <!--+
      | Readers circumvent the XML oriented SAX pipeline model, think of a reader
      | being a generator and a serializer at once thus a pipeline may not
      | contain any generator, transformer or serializer in addition to a
      | reader. They are useful for delivering binary content like images.
      +-->
  <map:readers default="resource">
    <map:reader logger="sitemap.reader.resource" name="resource" pool-max="32" src="org.apache.cocoon.reading.ResourceReader">
      <!--+
          | Resource reader has these configuration parameters:
      <expires>-1</expires>
      <quick-modified-test>false</quick-modified-test>
      <byte-ranges>true</byte-ranges>
      <buffer-size>8192</buffer-size>
          +-->
    </map:reader>
    <map:reader logger="sitemap.reader.image" name="image" src="org.apache.cocoon.reading.ImageReader"/>
  

    <map:reader logger="sitemap.reader.captcha" name="captcha" src="org.apache.cocoon.reading.CaptchaReader"/>
</map:readers>

  <!--+
      | Matchers are executed during pipeline setup. They decide if a
      | pipeline fragment is used within a pipeline. Usually, the decision
      | is based on a match on the requested URI but matchers exist, that
      | match different things as well. Most often the fragment contained in
      | a matcher has a generator as well as a serializer. This is not a
      | necessity, matchers can be nested while chaining does not work.
      +-->
  <map:matchers default="wildcard">
    <map:matcher logger="sitemap.matcher.wildcard" name="wildcard" src="org.apache.cocoon.matching.WildcardURIMatcher"/>
    <map:matcher logger="sitemap.matcher.regexp" name="regexp" src="org.apache.cocoon.matching.RegexpURIMatcher"/>
    <map:matcher logger="sitemap.matcher.request-parameter" name="request-parameter" src="org.apache.cocoon.matching.RequestParameterMatcher"/>
    <map:matcher logger="sitemap.matcher.cookie" name="cookie" src="org.apache.cocoon.matching.CookieMatcher"/>
    <map:matcher logger="sitemap.matcher.header" name="header" src="org.apache.cocoon.matching.HeaderMatcher"/>
    <map:matcher logger="sitemap.matcher.parameter" name="parameter" src="org.apache.cocoon.matching.ParameterMatcher"/>
    <map:matcher logger="sitemap.matcher.sessionstate" name="sessionstate" src="org.apache.cocoon.matching.WildcardSessionAttributeMatcher">
      <attribute-name>org.apache.cocoon.SessionState</attribute-name>
    </map:matcher>
    <map:matcher logger="sitemap.matcher.referer-match" name="referer-match" src="org.apache.cocoon.matching.WildcardHeaderMatcher">
      <header-name>referer</header-name>
    </map:matcher>
    <map:matcher name="mount-table" src="org.apache.cocoon.matching.MountTableMatcher">
      <map:parameter name="ignore-missing-tables" value="true"/>
    </map:matcher>
    <map:matcher logger="sitemap.matcher.locale" name="locale" src="org.apache.cocoon.matching.LocaleMatcher">
      <!--+
          | Default configuration:
      <locale-attribute>locale</locale-attribute>
      <negotiate>false</negotiate>
      <use-locale>true</use-locale>
      <use-locales>false</use-locales>
      <use-blank-locale>true</use-blank-locale>
      <default-locale language="en" country="US"/>
      <create-session>false</create-session>
      <store-in-request>false</store-in-request>
      <store-in-session>false</store-in-session>
      <store-in-cookie>false</store-in-cookie>
          +-->
    </map:matcher>
  </map:matchers>

  <!--+
      | Selectors are executed during pipeline setup. They can be used to
      | determine which pipeline fragments should be combined. They are best
      | compared with a java switch statement.
      +-->
  <map:selectors default="browser">
    <map:selector logger="sitemap.selector.browser" name="browser" src="org.apache.cocoon.selection.BrowserSelector">
      <!--+
          | NOTE: The appearance indicates the search order. This is very important since
          |       some words may be found in more than one browser description. (MSIE is
          |       presented as "Mozilla/4.0 (Compatible; MSIE 4.01; ...")
          +-->
      <browser name="explorer" useragent="MSIE"/>
      <browser name="pocketexplorer" useragent="MSPIE"/>
      <browser name="handweb" useragent="HandHTTP"/>
      <browser name="avantgo" useragent="AvantGo"/>
      <browser name="imode" useragent="DoCoMo"/>
      <browser name="opera" useragent="Opera"/>
      <browser name="lynx" useragent="Lynx"/>
      <browser name="java" useragent="Java"/>
      <browser name="wap" useragent="Nokia"/>
      <browser name="wap" useragent="UP"/>
      <browser name="wap" useragent="Wapalizer"/>
      <browser name="mozilla5" useragent="Mozilla/5"/>
      <browser name="mozilla5" useragent="Netscape6/"/>
      <browser name="netscape" useragent="Mozilla"/>
    </map:selector>

    <!--+
        | Exception selector : used in <map:handle> errors to build different pipelines
        | depending on the error that occured.
        | The configuration allows to associate a symbolic name to exception classes
        | which is used in the <map:when> tests.
        | An exception can also be "unrolled", meaning that cascaded exception will be checked.
        +-->
    <map:selector logger="sitemap.selector.exception" name="exception" src="org.apache.cocoon.selection.ExceptionSelector">
      <exception class="org.apache.cocoon.ResourceNotFoundException" name="not-found"/>
      <exception class="org.apache.cocoon.components.flow.InvalidContinuationException" name="invalid-continuation"/>
      <!-- The statement below tells the selector to unroll as much exceptions as possible -->
      <exception class="java.lang.Throwable" unroll="true"/>
    </map:selector>

    <map:selector logger="sitemap.selector.request-method" name="request-method" src="org.apache.cocoon.selection.RequestMethodSelector"/>
    <map:selector logger="sitemap.selector.resource-exists" name="resource-exists" src="org.apache.cocoon.selection.ResourceExistsSelector"/>
    <map:selector logger="sitemap.selector.request-parameter" name="request-parameter" src="org.apache.cocoon.selection.RequestParameterSelector">
      <!--+
          | Define now which request parameter to use; or do it later,
          | when using this selector, via "parameter-name" parameter.
      <parameter-name>myparam</parameter-name>
          +-->
    </map:selector>
    <map:selector logger="sitemap.selector.request-attribute" name="request-attribute" src="org.apache.cocoon.selection.RequestAttributeSelector">
      <!-- <attribute-name>myparam</attribute-name> -->
    </map:selector>
    <map:selector logger="sitemap.selector.session-attribute" name="session-attribute" src="org.apache.cocoon.selection.SessionAttributeSelector">
      <!-- <attribute-name>myparam</attribute-name> -->
    </map:selector>
    <map:selector logger="sitemap.selector.parameter" name="parameter" src="org.apache.cocoon.selection.ParameterSelector"/>
    <map:selector logger="sitemap.selector.header" name="header" src="org.apache.cocoon.selection.HeaderSelector">
      <!-- <header-name>myparam</header-name> -->
    </map:selector>
    <map:selector logger="sitemap.selector.host" name="host" src="org.apache.cocoon.selection.HostSelector"/>
    <map:selector logger="sitemap.selector.simple" name="simple" src="org.apache.cocoon.selection.SimpleSelector"/>
  

    <map:selector name="session-media" src="org.apache.cocoon.webapps.session.selection.MediaSelector"/>
</map:selectors>


  <!--+
      | Actions are executed during pipeline setup. Their purpose is to
      | execute some code that doesn't involve touching the stream of
      | pipeline events. Example usage is to update databases, check external
      | resources, etc.. The execution may fail or complete successfully. Only
      | if the execution of the action was successful, the pipeline fragment
      | nested inside the action element is executed, otherwise, it's skipped
      | entirely and execution proceeds from the element right below the action.
      +-->
  <map:actions>
    <map:action logger="sitemap.action.request" name="request" src="org.apache.cocoon.acting.RequestParamAction"/>
    <map:action logger="sitemap.action.requestParamExists" name="req-params" src="org.apache.cocoon.acting.RequestParameterExistsAction"/>
    <map:action logger="sitemap.action.form-validator" name="form-validator" src="org.apache.cocoon.acting.FormValidatorAction"/>
    <map:action logger="sitemap.action.session-state" name="session-state" src="org.apache.cocoon.acting.SessionStateAction"/>
    <map:action logger="sitemap.action.session-isvalid" name="session-isvalid" src="org.apache.cocoon.acting.SessionIsValidAction"/>
    <map:action logger="sitemap.action.session-validator" name="session-validator" src="org.apache.cocoon.acting.SessionValidatorAction"/>
    <map:action logger="sitemap.action.session-invalidator" name="session-invalidator" src="org.apache.cocoon.acting.SessionInvalidatorAction"/>
    <map:action logger="sitemap.action.resource-exists" name="resource-exists" src="org.apache.cocoon.acting.ResourceExistsAction"/>
    <map:action logger="sitemap.action.set-header" name="set-header" src="org.apache.cocoon.acting.HttpHeaderAction"/>
    <map:action logger="sitemap.action.clear-cache" name="clear-cache" src="org.apache.cocoon.acting.ClearCacheAction"/>
    <map:action logger="sitemap.action.clear-persistent-store" name="clear-persistent-store" src="org.apache.cocoon.acting.ClearPersistentStoreAction"/>
    <map:action logger="sitemap.action.locale" name="locale" src="org.apache.cocoon.acting.LocaleAction">
      <!--+
          | Default configuration:
      <locale-attribute>locale</locale-attribute>
      <create-session>false</create-session>
      <store-in-request>false</store-in-request>
      <store-in-session>false</store-in-session>
      <store-in-cookie>false</store-in-cookie>
      <use-locale>true</use-locale>
      <default-locale language="en" country="US"/>
          +-->
    </map:action>
  
   <map:action logger="sitemap.action.serverpages" name="serverpages" pool-max="32" src="org.apache.cocoon.acting.ServerPagesAction"/>


    <map:action name="session" src="org.apache.cocoon.webapps.session.acting.SessionAction"/>

    <map:action name="session-form" src="org.apache.cocoon.webapps.session.acting.SessionFormAction"/>

    <map:action name="session-form-manager" src="org.apache.cocoon.webapps.session.acting.FormManagerAction"/>
</map:actions>


  <!--+
      | The different pipe implementations
      |
      | NON-CACHING:
      |   The non caching implementation of cocoon pipelines.
      |
      | CACHING:
      |   Traditional longest cacheable key caching.
      |
      | CACHING-POINT:
      |   The caching-point pipeline implements an extended
      |   caching algorithm which is of particular benefit for use with
      |   those pipelines that utilise cocoon-views and/or provide
      |   drill-down functionality.
      |
      | The autoCachingPoint algorithim (if enabled) will automatically
      | cache common elements of the pipeline currently being processed - as well
      | as the entire cacheable pipeline according to the "longest cacheable key"
      | algorithm.
      |
      | Consider the following simple pipeline, where generator G is labelled with
      | a cocoon-view enabling the pipeline to serialize data to either html or pdf
      | depending on the value of cocoon-view (as provided by the request):
      | G - T -  S(html)
      | |__ T -  S(pdf)
      |
      | If cocoon-view=html, then the caching-point algorithm will not only cache
      | the longest cacheable path, which would be GTS(html) but also the
      | *common element* which in this case would be the results from G. If the
      | next request to this pipeline was cocoon-view=pdf, then there would be no
      | need to invoke the generator a second time, as it's value has already been
      | cached (provided G generates the same cache key)
      |
      | Also note: One can switch "Off" autoCachingPoint and use "pipeline-hints" to
      | manually indicate that certain pipeline-components should be considered as
      | cache points.
      +-->
   <map:pipes default="caching">
     <map:pipe name="caching" src="org.apache.cocoon.components.pipeline.impl.CachingProcessingPipeline">
       <!--+
           | If not specified, the value of the outputBufferSize parameter is -1.
           | This will cause Cocoon to buffer all output until processing has finished
           | before sending it to the client. This has the advantage that in case
           | an error occurs during the processing of the SAX-pipeline, Cocoon is still
           | able to reset the response and send an error page instead. Otherwise the
           | error page will be appended to the output already send to the client.
           | If you are generating larger pages, it might be benificial to enable
           | this parameter, so that output is gradually send to the client as it
           | is being generated.
           | For more granularity, you can also supply this parameter to
           | individual map:pipeline elements (using map:parameter syntax).
           +-->
       <!-- parameter name="outputBufferSize" value="8192"/ -->
     </map:pipe>
     <map:pipe name="caching-point" src="org.apache.cocoon.components.pipeline.impl.CachingPointProcessingPipeline">
       <parameter name="autoCachingPoint" value="On"/>
       <!-- parameter name="outputBufferSize" value="8192"/ -->
     </map:pipe>
     <map:pipe name="noncaching" src="org.apache.cocoon.components.pipeline.impl.NonCachingProcessingPipeline">
       <!-- parameter name="outputBufferSize" value="8192"/ -->
     </map:pipe>
     <!--+
         | This pipeline implementation caches the complete content for a defined
         | period of time (expires). The cache key is the current uri.
         +-->
     <map:pipe name="expires" src="org.apache.cocoon.components.pipeline.impl.ExpiresCachingProcessingPipeline">
       <parameter name="cache-expires" value="180"/> <!-- Expires in secondes -->
     </map:pipe>
   
     <!-- The following two can be used for profiling:-->
     <map:pipe name="profile-caching" src="org.apache.cocoon.components.profiler.ProfilingCachingProcessingPipeline"/>
     <map:pipe name="profile-noncaching" src="org.apache.cocoon.components.profiler.ProfilingNonCachingProcessingPipeline"/>
</map:pipes>

 </map:components>


<!-- =========================== Views =================================== -->

  <!--+
      | Views provide different, well, views to resources. Views are
      | orthogonal to pipelines. Please refer to the docs.
      |
      | It would be wise to disable any unneeded views in a
      | production environment in order to avoid exposing data
      | that you may not necessarily wish to.
      +-->
  <map:views>
    <map:view from-label="content" name="content">
      <map:serialize type="xml"/>
    </map:view>

    <map:view from-label="content" name="pretty-content">
      <map:transform src="stylesheets/system/xml2html.xslt"/>
      <map:serialize type="html"/>
    </map:view>

    <map:view from-position="last" name="links">
      <map:serialize type="links"/>
    </map:view>
  </map:views>


<!-- =========================== Resources ================================= -->

  <!--+
      | Resources are pipeline fragments that may be used from different
      | pipeline fragments. For our needs, they behave exactly like
      | pipelines, only that they are not accessible from outside.
      | Hence I will explain what's inside below for pipelines.
      +-->
 <map:resources>
 </map:resources>


 <map:pipelines>

  <map:component-configurations>
    <global-variables>
       <!--+
           | Define global parameters here:
           |   <skin>my_skin</skin>
           |   ...
           | You can access them by {global:*name*}, e.g. {global:skin}.
           | These values are inherited into sub-sitemaps and can
           | be extended there.
           +-->
    </global-variables>
  </map:component-configurations>

  <map:pipeline>

    <!-- welcome page -->
    <map:match pattern="">
      <map:generate src="may/index.xhtml"/>
      <map:serialize type="xhtml"/>
    </map:match>

    <map:handle-errors>
      <map:select type="exception">

        <map:when test="not-found">
          <map:generate type="exception"/>
          <map:transform src="stylesheets/system/exception2html.xslt">
            <map:parameter name="contextPath" value="{request:contextPath}"/>
            <map:parameter name="realPath" value="{realpath:}"/>
            <map:parameter name="pageTitle" value="Resource not found"/>
          </map:transform>
          <map:serialize status-code="404"/>
        </map:when>

        <map:when test="invalid-continuation">
          <map:generate type="exception"/>
          <map:transform src="stylesheets/system/exception2html.xslt">
            <map:parameter name="contextPath" value="{request:contextPath}"/>
            <map:parameter name="realPath" value="{realpath:}"/>
            <map:parameter name="pageTitle" value="Invalid Continuation"/>
          </map:transform>
          <map:serialize status-code="404"/>
        </map:when>

        <map:otherwise>
          <map:generate type="exception"/>
          <map:transform src="stylesheets/system/exception2html.xslt">
            <map:parameter name="contextPath" value="{request:contextPath}"/>
            <map:parameter name="realPath" value="{realpath:}"/>
          </map:transform>
          <map:serialize status-code="500"/>
        </map:otherwise>
      </map:select>

    </map:handle-errors>
  </map:pipeline>
 </map:pipelines>

</map:sitemap>
